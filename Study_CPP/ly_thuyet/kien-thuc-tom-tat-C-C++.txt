			[------------------- CÁU TRÚC CƠ BẢN CỦA MỌI CT C/C++ -------------------] 

	#include <stdio.h>					#include <iostream>			
	int main()						int main()
	{						{
		int n; //Khai báo biến n				int n; // Khai báo biến n
		printf("In ra màn hình") //In ra màn hình		std::cout<<("<text>")
		scanf("%d", &n) //Nhập dữ liệu vào biến n		std::cin >> n; // 
		return 0;					return 0;
	}						}



				[------------------- KÝ TỰ ĐẶC BIỆT -------------------] 

	\n	Xuống dòng
	\t	Tab khoảng cách ngang
	\r	Nhảy về đầu hàng
	\a	Tạo tiếng kêu
	\f
	\b  khoảng trắng
	\v
	\\	In ký tự  \
	\"	In ký tự  "
	\'	In ký tự '
	%%	In ký tự % 



				[------------------- ĐẶC TẢ -------------------]

	%d		int			định dạng kiểu số nguyên và tham chiếu dữ liệu hệ thập phân 
	%i 		int			định dạng kiểu số nguyên và tham chiếu dữ liệu hệ thập lục phân
	%f		float			định dạng kiểu số thực
	%c 		char			định dạng kiểu ký tự
	%s		character string 	   	định dạng kiểu chuỗi ký tự
	%Lf		double			định dạng kiểu số thực double 
	%ld		long			định dạng cho một số kiểu long 
	%Lf		long double		định dạng cho một số kiểu long double 



				[------------------- ÉP KIỂU -------------------]

	Loại 1: Nới rộng (widening) (Mở rộng vùng nhớ)
		short -> int -> long -> float -> double
		VD: long x;
			float y = x;	
	Loại  2: Thu hẹp (narrowing) (Thu hẹp vùng nhớ)
		double -> float -> long -> int -> short
		VD: float y;
			long x = (long)y;



				[------------------- THƯ VIỆN MATH VÀ HÀM CƠ BẢN -------------------] 

	ceil(<variable>) : Hàm làm tròn lên
	floor(<variable>) : Hàm làm tròn xuống
	sqrt(<variable>) : Hàm căn bậc hai
	pow(<variable>, số mũ) : Hàm luỹ thừa (mũ)
	abs(<variable>) : Hàm trị tuyệt đối
	asin(<variable>) : Hàm Arc Sin, giá trị radian
	acos(<variable>) : Hàm Arc Cos, giá trị radian
	atan(<variable>) : Hàm Arc Tan, giá trị radian
	sin(<variable>) : Hàm Sin, giá trị radian
	cos(<variable>) : Hàm Cos, giá trị radian
	tan(<variable>) : Hàm Tan, giá trị radian
	fmax(a, b) : Tìm giá trị lớn nhất giữa a và b
	fmin(a, b) : Tìm giá trị nhỏ nhất giữa a và b



				[------------------- CẤU TRÚC LỆNH RẼ NHÁNH -------------------] 

+ Câu lệnh If:
		if (<Điều kiện>) {
			<Khối lệnh>
		}

+ Câu lệnh Switch Case
		switch (<variable>) {
 				case <Điều kiện 1>:
 			    	// khối lệnh
 			     	break;
				...
 				case <Điều kiện n>:
 			     	// khối lệnh
 			     	break;

 				default:
 			    	// Không có điều kiện nào phù hợp, mặc định thực hiện lệnh này
		}			

+ Cấu Trúc Lệnh Vòng Lặp:
	Vòng For:
		For (Điểm xuất phát; Điều kiện dừng; Bước nhảy) {
			<Khối lệnh>
		}
	
	Vòng While:
		While (<Điều Kiện>) {
			<Khối lệnh>
		}

	Vòng Do While:
		do {
			<Khối lệnh>
		} while (<Điều kiện để tiếp tục thực hiện lệnh do>)

				[------------------- TOÁN TỬ LOGIC -------------------]

	!  : Toán tử (not) "phủ định"
	&& : Toán tử (and) "và"
	|| : Toán tử (or) "hoặc"



				[------------------- LỆNH GOTO VÀ CONTINUE -------------------] 

+ Lệnh goto: dùng để cung cấp bước nhảy vô điều kiện từ goto đến một câu lệnh có gắn nhãn. Câu lệnh có gắn nhãn có cấu trúc: label:

+ Lệnh continue: Là câu lệnh mà khi gặp nó chương trình sẽ bỏ qua những câu lệnh đứng dưới nó trong một khối
				    


				[------------------- TRONG LẬP TRÌNH C -------------------]

+ Lý Thuyết:
	Hàm định nghĩa sẳn: printf(), scanf(), sqrt(), abs()...
	Hàm tự định nghĩa: main()... cách định nghĩa một hàm 
		<kiểu dữ liệu trả về> <tên hàm>(<các tham số>) {
			phần thân hàm chứa khối lệnh
			return; //trả về giá trị nếu có (kiểu void sẽ không cần return)
		}



[------------------- KHÁI NIỆM VỀ THAM CHIẾU VÀ THAM TRỊ -------------------]


				[------------------- CON TRỎ  -------------------]

- Trong bộ nhớ máy tính chia làm 4 vùng nhớ:
1. Code segment
- Lưu giữ các mã máy - mã máy là các mã nhị phân 0 1

2. Data segment
- Lưu trữ các biến tĩnh (static) và các biến toàn cục - nằm ngoài phạm vi của hàm - có phạm vi hoạt động từ cái dòng khai báo, khởi tạo trở xuống

3. Stack segment
- Vùng nhớ lưu trữ các biến cục bộ 
- Những cái biến nào mà nó nằm trong cái cặp ngoặc nhọn {} thì gọi là biến cục bộ 
- Vùng nhớ này sẽ do CPU quản lí - nghĩa là khi chúng ta yêu cầu cấp phát 1 vùng nhớ thì CPU sẽ cấp phát, khi chúng ta không dùng nữa thì tự động CPU giải phóng vùng nhớ đó

4. Heap segment
- Vùng nhớ này là vùng nhớ không do CPU quản lí, mà do người lập trình quản lí vùng nhớ này. 
- Khi vùng lập trình cấp phát cái biến để sử dụng trong cái vùng nhớ này - con trỏ, thì sau khi sử dụng xong - phải có cơ chế giải phóng vùng nhớ đó 


=================Khái niệm con trỏ - biến con trỏ

- 1 biến bình thường gồm 2 thành phần: 
+ Giá trị
+ Địa chỉ

int a; // Hệ điều hành sẽ cấp phát cho chúng ta 1 vùng nhớ ngẫu nhiên đâu đó trong bộ nhớ máy tính - và hệ điều hành gán cho biến đó 1 cái địa chỉ để quản lí 

Biến con trỏ cũng giống như 1 biến bình thường cũng có 2 thành phần, nhưng nó có 1 tính chất mà các biến bình thường không có - đó là miền giá trị

- Biến con trỏ có 3 thành phần: 
+ Giá trị
+ Địa chỉ
+ Miền giá trị

Miền giá trị là cái địa chỉ của cái biến mà con trỏ đó trỏ tới.
Nó có quyền trỏ lung tung trong bộ nhớ 
Cú pháp: <kiểu dữ liệu trỏ tới> * <tên con trỏ>

VD: 
int *b; //Khai báo ra biến con trỏ  
- Kiểu dữ kiệu con trỏ không phải là kiểu dữ liệu của nó, mà đó chính là kiểu dữ liệu của cái biến mà con trỏ đó sẽ trỏ tới 
- Con trỏ b chỉ có thể trỏ đến các biến int mà thôi 

Tính Chất: của con trỏ là lấy địa chỉ của 1 biến mà nó trỏ đến


===================Khái niệm con trỏ vô kiểu 

void * : con trỏ này có thể nhận mọi kiểu dữ liệu
VD: 
int a;
void *p;
p = &a;


===================Cơ chế cấp phát bộ nhớ và giải phóng bộ nhớ

- Tại sao phải cấp phát bộ nhớ cho con trỏ?
Khi ta khai báo int *p = 8; - lúc này biến p chỉ có địa chỉ, chưa hề tồn tại vùng nhớ để chứ địa chỉ. Nếu như ban đầu ta muốn cho con trỏ p đó chứa giá trị thì sẽ bị lỗi, bởi vì con trỏ đó chưa có vùng nhớ.
Vì vậy chúng ta cần phải đi cấp phát cho con trỏ đó 1 cái vùng nhớ - vùng nhớ này phải hợp lệ.

- Tại sao phải giải phóng bộ nhớ?
Biến toàn cục, cục bộ thì do CPU quản lí - khi ta không dùng nữa hay kết thúc chương trình thì CPU sẽ đến đó và giải phóng vùng nhớ cho các biến
Vùng nhớ chứa con trỏ là vùng nhớ do người lập trình quản lí, khi ta cấp phát vùng nhớ cho con trỏ, thì khi mà ta không dùng nữa thì ta phải đi giải phóng vùng nhớ đó.
Nếu như ta không đi giải phóng cho vùng nhớ sau khi ta cấp phát  và sử dụng thì sẽ gây ra tình trạng tràn bộ nhớ - Memory Leak.


- Trong ngôn ngữ lập trình C:
- có các hàm cấp phát bộ nhớ cho con trỏ như sau:
+ malloc: Nếu như ta không gán giá trị cho ô nhớ thì nó sẽ mang giá trị rác (chính là giá trị không xác định thuộc kiểu dữ liệu của biến đó)
+ calloc: Nếu như ta không gán giá trị cho ô nhớ thì nó sẽ mang giá trị là 0
+ realloc (Hàm cha của 2 hàm trên):
++ Nếu như con trỏ chưa hề được cấp phát vùng nhớ thì hàm realloc sẽ cấp phát cho nó 1 vùng nhớ mới
vd: a = (int *)realloc(NULL, sizeof(int));
++ Nếu như con trỏ đã có vùng nhớ thì hàm realloc có tác dụng cấp phát lại vùng nhớ cho con trỏ - nghĩa là có thể nới rộng vùng nhớ, thu hẹp vùng nhớ
vd: a = (int *)realloc(b, sizeof(int));
- Dùng hàm free(): để giải phóng bộ nhớ cho con trỏ

- Trong ngôn ngữ lập trình C++:
+ có toán tử new để cấp phát bộ nhớ cho con trỏ
<kiểu dữ liệu>*<tên con trỏ cần cấp phát vùng nhớ> = new <kiểu dữ liệu>[số lượng ô nhớ cần cấp phát];
+ dùng delete: giải phóng vùng nhớ cho con trỏ - thực chất chỉ là đang thông báo cho hệ điều hành biết rằng: cái vùng nhớ cấp phát khi nãy tui (con trỏ) không dùng nữa - anh (hệ điều hành) xem thằng nào (chương trình khác) cần vùng nhớ đó thì anh lấy cho thằng đó đi.Vùng nhớ chỉ hoàn toàn được giải phóng khi có cái chương trình nào đó dùng vùng nhớ đó

==> Tất cả các vùng nhớ mà cấp phát cho con trỏ đều nằm trên cùng nhớ HEAP SEGMENT 
==> Vì vậy khi chúng ta cấp phát bộ nhớ cho con trỏ thì - khi không sử dụng nữa thì phải giải phóng cho nó
==> Không giải phóng sẽ bị lỗi tràn bộ nhớ (memory leak) 



 
				[------------------- Mảng 1 Chiều - Cấp Phát Động -------------------]

- Mảng động là mảng có thể thay đổi số lượng phần tử của mảng trong quá trình chương trình chạy

- Cú pháp: 
<kiểu dữ liệu của mảng> * <tên mảng - tên con trỏ quản lí mảng> = new <kiểu dữ liệu của mảng>[số lượng phần tử của mảng];

- Hạn chế dư thừa bộ nhớ

				[------------------- MẢNG 2 CHIỀU -------------------]

* CÚ PHÁP:        <kiểu dữ liệu> <Tên mảng> [<Kích thước dòng>][<Kích thước cột>]
VD:
int arr[2][3]: khai  báo mảng 2 chiều số nguyên có tối đa 2 dòng và 3 cột, chứa tối đa 20 phần tử

MẢNG 2 CHIỀU CÓ SỐ DÒNG = SỐ CỘT => MA TRẬN VUÔNG
+ Đường chéo chính: Là đường chéo xuất phát từ góc trên bên trái đến góc dưới bên phải.
+ Đường chéo phụ: Là đường chéo xuất phát từ góc trên bên phải đến góc dưới bên trái.
VD: int a[4][4]
+ Các phần tử nằm trên đường chéo chính: a[0][0], a[1][1], a[2][2], a[3][3].
	row = colum
+ Các phần tử nằm trên đường chéo phụ: a[0][3], a[1][2], a[2][1], a[3][0].
	row tăng - column giảm



				[------------------- CHUỖI KÍ TỰ  -------------------]

Trong ngôn ngữ lập trình C/C++ không có khái niệm kiểu dữ liệu chuỗi
+ Bên C: 
Char: lưu 1 kí tự 
Chuỗi: là tập hợp các kí tự - char
+Bên C++:
Lớp string: hỗ trợ thao tác trên chuỗi
Thư viện: <string>

======

Kí tự: là các chữ cái riêng lẽ với nhau và được đặt trong dấu nháy ĐƠN.
VD:  'g', 'k'
Chuỗi: là tập hợp các kí tự và được đặt trong dấu nháy KÉP.
VD:  "lap trinh" => 'l' , 'a', 'p',' ', 't', 'r', 'i', 'n', 'h', '\0' .


	======== CHUỖI BÊN NGÔN NGỮ C ======

Chuỗi là tập hợp 1 hoặc nhiều kí tự lại với nhau.
===> Bản chất: là mảng 1 chiều các kí tự - char
- Mảng số nguyên: int a[100];
Khai báo: 
char HoTen[30]; // khai báo mảng kí tự chứa 29 kí tự - chừa ra ô nhớ cuối cùng chứa kí tự '\0' - Kí tự kết thúc chuỗi.

    // CACH 1: Khai báo chuỗi
    char ho_ten[30]; // * Khai báo chuỗi hoten chứa 29 kí tự, dành ra 1 ô nhớ cuối để chứ kí tự '\0'
    *** // CÁCH 2: Khai báo chuỗi nhưng cho nó giá trị mặc định ban đầu là 1 cái chuỗi
    char mon_hoc[30] = "Ki thuat lap trinh"; // * Tự động thêm kí tự \0 vào cuối chuỗi
    // CÁCH 3: Khai báo chuỗi nhưng cho nó giá trị mặc định ban đầu là 1 cái chuỗi và tự động xác định độ dài chuỗi
    char ma_so[] = "GK270803";

	============ XUẤT CHUỖI ==========
    // Cách 1: dùng lệnh printf("đặc tả: %s", chuỗi cần xuất);
    printf("\nChuoi nhan duoc: %s", mon_hoc);

    // Cách 2: dùng hàm mà ngôn ngữ C hỗ trợ chuyền dành đẻ xuất chuỗi
    // puts(mon_hoc);

	============ NHẬP CHUỖI ==========
Cơ chế nhập giá trị cho biến: khi chúng ta nhập cái gì đó từ bàn phím thì cái gì đó sẽ được lưu dưới bộ nhớ đệm và chương trình sẽ lấy dữ liệu từ bộ nhớ đệm đó gán đưa vào cho biến.
* CÁCH 1 *
Dùng lệnh scanf()
- Nhưng scanf(): không nhận kí tự khoảng trắng và kí tự xuống dòng
* CÁCH 2 *
Dùng hàm gets(<chuỗi cần nhập>)
- Nhưng hàm gets(): không nhận kí tự xuống dòng ('\n')

	============ LỖI KHI NHẬP CHUỖI =========

#include <stdio.h>
#include <conio.h>
/* Nhap vao ho ten va nam sinh cua sinh vien */
int main()
{
    char ho_ten[30];
    int nam_sinh;

    printf("\nNhap nam sinh cua may nua: ");
    scanf("%d", &nam_sinh); // <=> C++: std::cin >> nam_sinh
    printf("\nNhap ho va ten cua may: ");
    gets(ho_ten);

    printf("\nHo ten may: %s", ho_ten);
    printf("\nNam sinh may: %d", nam_sinh);

    getch();
    return 0;
}

	============= CÁCH KHẮC PHỤC ============
Trước khi nhập chuỗi - chúng ta sẽ đi xóa bộ nhớ đệm 
Bên C: fflush(stdin);
Bên C++: std::cin.ignore();

	============ CÁC HÀM CHUỖI =========
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
1. TÍNH ĐỘ DÀI: 				** strlen() **
- Đếm số lượng kí tự có trong chuỗi (trừ kí tự '\0' - kí tự kết thúc chuỗi)
**Cú Pháp: strlen(<chuỗi cần tính>)
	---- Tự xây dựng ----
int STRLEN(char s[])
{
    // todo cach 1: dung while lap vo tan den khi nao gap ki tu '\0' thi dung.
    // int i = 0;
    // while (true)
    // {
    //     if (s[i] == '\0')
    //     {
    //         return i;
    //     }
    //     i++;
    // }

    // todo cach 2: dung for
    for (int i = 0;; i++)
    {
        if (s[i] == '\0')
        {
            return i;
        }
    }
}
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
2. SAO CHÉP: 				** strcpy() **
- Sao chép chuỗi nguồn sang cho chuỗi desk
**Cú Pháp: strcpy(<chuỗi desk>, <chuỗi nguồn>)
	---- Tự xây dựng ----
void STRCPY(char s2[], char s1[])
{
    for (int i = 0; i < strlen(s1); i++)
    {
        s2[i] = s1[i];
    }
    s2[strlen(s1)] = '\0'; // Them ki tu '\0' vao cuoi chuoi
}
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
3. SAO CHÉP NHƯNG TIẾT KIỆM BỘ NHỚ HƠN: 		** strdup() **	
- Hàm strdup() sẽ yêu cầu bộ nhớ máy tính cấp phát ra 1 vùng nhớ chứa <chuỗi> sau đó con trỏ s sẽ chỏ đến vùng nhớ vừa được cấp phát để quản lí chuỗi đó.
- Sau khi cấp phát phải trả lại vùng nhớ cho Hệ Điều Hành: 
	+ Bên C: free(s)   // Thuộc thư viện <stdlib.h>
	+ Bên C++: delete s;  
** Cú Pháp:  char *s = strdup(<chuỗi>)
	---- Tự xây dựng ----
char *STRDUP(char s1[]) // * char * de tra ve chuoi
{
    // Cap phat vung nho cho chuoi s2 de sao chep cac ki tu cua chuoi s1
    char *s2 = (char *)malloc(strlen(s1) + 1);
    for (int i = 0; i < strlen(s1); i++)
    {
        s2[i] = s1[i];
    }
    s2[strlen(s1)] = '\0';
    return s2;
    free(s2);
}
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
4. CHUYỂN THÀNH CHUỖI IN THƯỜNG		** strlwr() **
- Tất cả các kí tự trên bàn phím đều được lưu dưới mã ASCII - mã ASCII là mã hệ thập phân - hệ 10. Nói chung là các kí tự sẽ được lưu bằng 1 mã số nguyên (ASCII).
	A: 65 -> Z: 90	;	a: 97 -> z: 122
LƯU Ý: mã ASCII của kí tự in thường luôn lớn hơn mã ASCII của kí tự in hoa là ( 32 đơn vị).

**Cú Pháp: strlwr(<chuỗi >)

	----- Tự xây dựng -----

void STRLWR(char s[])
{
    for (int i = 0; i < strlen(s); i++)
    {
        if ('A' <= s[i] && s[i] < +'Z')
        {
            s[i] += 32;
        }
    }
}
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
5. CHUỖI IN HOA:			** strupr() ** 			Ngược lại với in thường ở trên |^|
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
6. ĐẢO CHUỖI: 			** strrev() **
**Cú Pháp: strrev(<chuỗi>);
VD: Chuỗi "1 2 3 4 5" --> "5 4 3 2 1" 
s[0] = '1' sau khi đảo s[4] = '1'
s[1] = '2' sau khi đảo s[3] = '2'
s[2] = '3' sau khi đảo s[2] = '3'
s[3] = '4' sau khi đảo s[1] = '4'
s[4] = '5' sau khi đảo s[0] = '5'

Quy Tắc: Hoán vị 2 kí tự cho nhau: s[i] hoán vị s[độ dài - i - 1]
Hoán vị cặp kí tự trong đoạn: 0 đến (độ dài / 2 ) - 1
"1 2 3 4 5" ==> Độ dài 5: ==> 0 đến (độ dài / 2) - 1: 1  
	----- Tự Xây Dựng -----
void hoan_vi(char &x, char &y)
{
    char temp = x;
    x = y;
    y = temp;
}

void STRREV(char s[])
{
    char temp;
    for (int i = 0; i < (strlen(s) / 2); i++)
    {
        hoan_vi(s[i], s[strlen(s) - i - 1]);
    }
}

 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 Nguyên tắc so sánh 2 chuỗi: 

VD: so sánh 2 chuỗi s1, s2
- Lấy từng kí tự của chuỗi s1 so sánh với từng của chuỗi s2 - nếu phát hiện sự khác biệt thì lập tức kết luận 
+ Kí tự s1 > kí tự s2 
==> Chuỗi s1 < chuỗi s2 
+ Kí tự s2 < kí tự s1 
==> Chuỗi s1 < chuỗi s2 
- Nếu kí tự s1 và s2 bằng nhau thì tiếp tục so sánh đến khi nào gặp sự khác biệt hoặc kiểm tra hết tất cả các kí tự của 2 chuỗi mà vẫn không thấy sự khác biệt thì 2 chuỗi = nhau.
- So sánh 2 kí tự là đang so sánh trên mã ASCII của nó - mã ASCII là 1 mã số nguyên.
a: 97			A: 65
b: 98			B: 66
...			...
z: 122			Z: 90


7. SO SÁNH 2 CHUỖI có PHÂN BIỆT KÍ TỰ HOA VÀ KÍ TỰ THƯỜNG 		** strcmp() **
**Cú Pháp: strcmp(<chuỗi 1>,<chuỗi 2>)
- là hàm có giá trị trả về
	+ > 0  	==> s1  >  s2
	+ < 0 	==> s2  <  s1
	+ = 0 	==> s1 == s2
VD: 
s1 = "a";
s2 = "LAP TRINH";
==> s1 > s2 vì ( ASCII của 'a' > ASCII của 'L');
	----- Tự xây dựng -----
int STRCMP(char s1[], char s2[])
{
    int do_dai_min = strlen(s1) < strlen(s2) ? strlen(s1) : strlen(s2);
    for (int i = 0; i < do_dai_min; i++)
    {
        if (s1[i] > s2[i])
        {
            return 1;
        }
        else if (s1[i] < s2[i])
        {
            return -1;
        }
    }
    // * Neu sau khi thoat khoi vong lap for ma van chua phat hien su khac biet thi kiem tra do dai
    // * Neu do dai cua thang nao dai hon thi thang do lon hon
    if (strlen(s1) > strlen(s2))
    {
        return 1;
    }
    else if (strlen(s1) < strlen(s2))
    {
        return -1;
    }
    else
    {
        return 0; // * 2 chuoi co do dai = nhau
    }
}

 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
9. Chuyển 1 chuỗi số thành 1 số nguyên
VD: s = "123"
===> s = 123
"123" = ('1' - 48) * 10^2 + ('2' - 48) * 10^1 + ('3' - 48) * 10^0  <=> 1 * 10^2  + 2 * 10^1 + 3 * 10^0 = 123

+ 1 kí tự số mà muốn chuyển sang 1 số nguyên 
==> Kí tự số đó -48

+ 1 chữ số nguyên chuyển sang 1 kí tự
==> Chữ số nguyên +48

	======== CHUỖI BÊN NGÔN NGỮ C++ ======
- Được hỗ trợ bởi class string 
* Cú pháp: <kiểu dữ liệu> <tên>;
VD: std::string str;
Dùng thư viện <string> // Khai báo thư viện dùng các hàm xử lí  


	======== CÁC HÀM STRING TRONG C++ =========
#include <string>

string str;

==== ĐẢO ====
std::reverse(str.begin(), str.end()); <algorithm>

==== XÓA ====
str.erase(str.begin() + 3): xóa 1 kí tự tại vị trí 3
str.erase(x, y); // Xóa đi y ký tự bắt đầu tại vị trí x.
str.erase(str.begin() + x); // Xóa đi ký tự tại vị trí x.
str.erase(str.begin() + x, str.begin() + y); // Xóa đi các ký tự từ chỉ số x đến chỉ số y - 1

==== THÊM ====
str.insert(str.begin() + 3, 'y'): thêm 1 kí tự 'y' tại vị trí số 3
str.insert(x, "y", z); // Thêm z ký tự từ chuỗi y vào vị trí x. Nếu z có độ dài lớn hơn độ dài chuỗi y thì tiếp tục thêm vào 1 khoảng trắng và sau đó lại bắt đầu thêm vào các ký tự của chuỗi từ vị trí 0 --> sao cho đủ z thì thôi.

str.insert(x, y, 'z'); // Thêm y lần ký tự z vào vị trí x.
str.insert(str.begin() + x, 'y'); // Thêm ký tự y vào vị trí x.
str.insert(str.begin() + x, y, 'z'); // Thêm y lần ký tự z vào vị trí x.
str.insert(str.begin() + x, str2.begin() + y, str2.begin() + z); // Thêm chuỗi ký tự con của chuỗi str2 bắt đầu từ vị trí y cho đến vị trí z - 1 vào vị trí x trong chuỗi str.

==== LẤY CHUỖI CON ====
string str2 = str2.substr(x, y); // Lấy ra chuỗi con của chuỗi str2 bắt đầu từ vị trí x và lấy ra y ký tự.
string str2 = str.substr(x); // Lấy ra chuỗi con của chuỗi str2 bắt đầu từ vị trí x cho đến cuối chuỗi.

==== TÌM KIẾM ====
int found = str.find('x');
if(found != string::npos) => trả về found chính là vị trí xuất hiện đầu tiên của ký tự x trong chuỗi str.
else => Không tồn tại ký tự x trong chuỗi str. 

int found = str.find("x");
if(found != string::npos) => trả về found chính là vị trí xuất hiện đầu tiên của chuỗi x trong chuỗi str.
else => Không tồn tại chuỗi x trong chuỗi str. 

int found = str.find("x", y, z);
if(found != string::npos) => trả về found chính là vị trí xuất hiện đầu tiên của chuỗi x lấy ra z ký tự và sẽ bắt đầu tìm kiếm từ vị trí y trong chuỗi str.
else => Không tồn tại chuỗi x trong chuỗi str. 



	[------------------- KĨ THUẬT CHIA TÁCH FILE (file.h và file.cpp)-------------------]
Yêu Cầu:
- Các bạn phải nắm vững các kiến thức cơ bản của lập trình C/C++
+ Câu lệnh điều kiện
+ Vòng lặp
+ Hàm
+ ...

** Trong Chương Trình Sẽ Có 2 File : 
1. File có đuôi .h - hay còn gọi là file thư viện
- File thư viện do ngôn ngữ lập trình tạo ra sẵn - và chúng ta sẽ gọi lại để dùng 
+ stdio.h: file thư viện hỗ trợ việc nhập xuất chuẩn
+ conio.h: 
+ math.h: file thư viện hỗ trợ các hàm toán học : sqrt(), pow(), sin(), cos()...
+ string.h: file thư viện hỗ trợ các hàm thao tác trên chuỗi : strlen(), strcpy(),...
+ ........
- File thư viện do người lập trình tạo nên
==> Đáp ứng một số công việc nào đó cho người lập trình viên 

 KẾT LUẬN: file.h sẽ là file chứa các KHAI BÁO của các hàm

2. File có đuôi .cpp 
==> File.cpp sẽ là file chứa các ĐỊNH NGHĨA của các hàm ở trong file.h 

VD: 
thuviencuatoi.h - file này chứa các khai báo hàm mà chúng ta sẽ dùng 
- KHAI BÁO hàm kiểm tra số nguyên tố 
bool kiem_tra_so_nguyen_to(int n);
- KHAI BÁO hàm kiểm tra số hoàn thiện
bool kiem_tra_so_hoan_thien(int n);
- KHÁI BÁO hàm giải phương trình bậc 2
void giai_phuong_trinh_bac_hai(float a, float b, float c);




		[------------------- KIỂU DỮ LIỆU STRUCT  -------------------]
struct: bản chất là 1 kiểu dữ liệu cho người lập trình định nghĩa
STRUCT LÀ CƠ SỞ CỦA CLASS - LẬP TRÌNH HƯỚNG ĐỐI TƯỢNG

Đặt vấn đề: 
- Kiểu số nguyên: chỉ lưu được số nguyên
- Kiểu số thực: chỉ lưu được kiểu số thực 
- Kiểu kí tự: chỉ lưu được kí tự 

- Muốn lưu thông tin sinh viên:
+ Tên sinh viên: chuỗi
+ Mã số sinh viên: chuỗi
+ Điểm: số thực 
Khai báo cấu trúc struct: 
struct <tên biến cấu trúc>
{
	<kiểu dữ liệu thành phần 1> <tên thành phần 1>
	<kiểu dữ liệu thành phần 2> <tên thành phần 2>
	.........................
};

VD:
// Khai báo cấu trúc 1 sinh viên
struct sinh_vien
{
	string ho_ten;
	string mssv;
	float diem;
};

Truy xuất đến 1 thành phần trong struct
<tên biến cấu trúc đích>.<tên thành phần cần truy xuất>
VD: 
sinh_vien x;
x.mssv;
...

			[--------------- GÁN DỮ LIỆU KIỂU STRUCT -------------]
Cách 1: Gán struct này cho struct kia thông qua toán tử gán
sinh_vien x;
sinh_vien y;

y = x; // Gán tất cả thông tin hiện có trong sinh viên x cho sinh viên y

NẾU TRONG STRUCT SINH_VIEN ĐANG CHỨA 1 BIẾN CON TRỎ THÌ KHÔNG DÙNG ĐƯỢC TOÁN TỬ GÁN ĐỂ GÁN GIÁ TRỊ TỪ STRUCT NÀY SANG TRUCT KIA 

Cách 2: Gán từng thành phần của struct này cho từng thành phần tương ứng của struct kia 
sinh_vien x;
sinh_vien y;

y.ho_ten  = x.ho_ten;
y.diem = x.diem;


			[------------------- FILE -------------------]

------------- C ----------------
cú pháp FILE *<ten>;
				MODE
r	Mở file chỉ cho phép đọc - 	Nếu file không tồn tại, fopen() trả về NULL.
rb	Mở file chỉ cho phép đọc dưới dạng nhị phân. -	Nếu file không tồn tại, fopen() trả về NULL.
w	Mở file chỉ cho phép ghi. -	Nếu file đã tồn tại, nội dung sẽ bị ghi đè. Nếu file không tồn tại, nó sẽ được tạo tự động.
wb	Open for writing in binary mode. -	Nếu file đã tồn tại, nội dung sẽ bị ghi đè. Nếu file không tồn tại, nó sẽ được tạo tự động.
a	Mở file ở chế độ ghi “append”. Tức là sẽ ghi vào cuối của nội dung đã có. -	Nếu file không tồn tại, nó sẽ được tạo tự động.
ab	Mở file ở chế độ ghi nhị phân “append”. Tức là sẽ ghi vào cuối của nội dung đã có. -	Nếu file không tồn tại, nó sẽ được tạo tự động.
r+	Mở file cho phép cả đọc và ghi. -	Nếu file không tồn tại, fopen() trả về NULL.
rb+	Mở file cho phép cả đọc và ghi ở dạng nhị phân. -	Nếu file không tồn tại, fopen() trả về NULL.
w+	Mở file cho phép cả đọc và ghi. -	Nếu file đã tồn tại, nội dung sẽ bị ghi đè. Nếu file không tồn tại, nó sẽ được tạo tự động.
wb+	Mở file cho phép cả đọc và ghi ở dạng nhị phân.	Nếu file đã tồn tại, nội dung sẽ bị ghi đè. - Nếu file không tồn tại, nó sẽ được tạo tự động.
a+	Mở file cho phép đọc và ghi “append”. -Nếu file không tồn tại, nó sẽ được tạo tự động.
ab+	Mở file cho phép đọc và ghi “append” ở dạng nhị phân. -	Nếu file không tồn tại, nó sẽ được tạo tự động.

------ file văn bản --------
- Mở file: fopen("<đường dẫn đến file>", "<mode>")
- Ghi file: fprintf(), fscanf()
- Đóng file: fclose(<file cần đóng>)

------ file nhị phân --------
- Ghi file: fwrite(address_data,size_data,numbers_data,pointer_to_file)
- Đọc file: fread( , , , )


---------- C++ ------------------
- #include <fstream> 
==> thư viện hỗ trợ việc thao tác với file

1.
ifstream: đây là lớp - có chức năng hỗ trợ chúng ta ĐỌC dữ liệu từ file về chương trình
2.
ostream: đây là lớp - có chức năng hỗ trợ chúng ta GHI dữ liệu từ CHƯƠNG TRÌNH vào file 

=============== Các chế độ mở tệp tin file

ios::in		        Mở một tệp tin để đọc
ios::out		Mở một tệp tin có sẵn để in
ios::app		Mở một tệp tin có sẵn để thêm dữ liệu vào cuối tệp
ios::ate		Mở một tệp tin và đặt con trỏ vào cuối tệp
ios::trunc		Nếu tệp tin đã có sẵn thì dữ liệu của nó sẽ bị mất
ios::nocreate	Mở một tệp tin, tệp tin này bắt buộc phải tồn tại
ios::noreplace	Chỉ mở tệp tin khi tệp tin chưa tồn tại
ios::binary		Mở một tệp tin ở chế độ nhị phân. Khi mà file được mở ra ở chế độ này thì dữ liệu sẽ được đọc hay ghi từ 1 định dạng nguyên thuỷ nhị phân
ios::text		Mở một tệp tin ở chế độ văn bản


		[------------------- CON TRỎ CHỈ VỊ -------------------]
Hàm dịch chuyển con trỏ chỉ vị trong file 
seekg(x, y)
seekg( off_type offset, ios::seekdir origin );
origin: beg|cur|end
seekg( pos_type position );
- x: số byte cần dịch chuyển (luôn luôn là 1 con số nguyên)
	+ âm: dịch về bên tay trái
	+ dương: dịch về bên tay phải
- y: vị trí bắt đầu dịch
	+ y = 0: đầu file <=> ios::beg <=> SEEK_SET
	+ y = 1: vị trí hiện tại    <=> ios::cur <=> SEEK_CUR
	+ y = 2: cuối file <=> ios::end <=> SEEK_END	
eof(); // true -> con trỏ chỉ vị chưa nằm cuối file	
 
			

		[------------------- VECTOR -------------------]
======== ƯU ĐIỂM ========	
1. Vector bản chất là 1 mảng 1 chiều - cụ thể hơn nó là 1 cái mảng động - nó là 1 cái siêu mảng động 
+ Vector có thể chứa các kiểu dữ liệu cơ sở (int, float, char, double...) và kiểu dữ liệu do người lập trình định nghĩa (struct, class...)
TẠI SAO NÓ LÀ SIÊU MẢNG ĐỘNG
 + Vector có hết tất cả các tính chất mà mảng 1 chiều (mảng tĩnh và mảng động) và có thêm 1 số tính chất riêng của nó nữa (khắc phục các nhược điểm của mảng tĩnh và mảng động).
+ Nếu như chúng ta dùng mảng tĩnh hay mảng động thì KHAI BÁO KÍCH THƯỚC CỦA MẢNG CẦN THAO TÁC TRƯƠC. Còn vector ko cần khai báo trước số lượng phần tử cần dùng - bởi vì nó được hỗ trợ cái cơ chế tự động thêm phần tử vào cuối (push_back())
+ Tự động đi giải phóng vùng nhớ khi chương trình kết thúc
+ Các thao tác thêm, xoá, tìm kiếm, sắp xếp bên mảng 1 chiều (mảng tĩnh hay mảng động) thì chúng ta phải đi cài đặt - còn bên vector nó sẽ hỗ trợ chúng ta các cái hàm xử lý tương tự

========KHUYẾT ĐIỂM ==========
- Tốn bộ nhớ hơn mảng tĩnh và mảng động (do cơ chế container buộc phải tạo ra thêm các vùng nhớ riêng để quản lí chặt chẽ hơn)

- Vector, String, List, Stack, Queue: thuộc thư viện chuẩn của C++ - STL (Standard Template Library)

#include <vector>

==========MỘT SỐ HÀM HỖ TRỢ TRÊN VECTOR=======

1/ resize:
- Hàm này có 2 dạng:
	-  resize(<số lượng>): Cấp phát mảng với số lượng phần tử cụ thể cho trước. 

                   	+ Mặc định khi cấp phát với resize là các phần tử đều mang giá trị mặc định ban đầu là 0(giống hàm calloc bên C)
                   	+ Nếu mảng chưa từng được tạo thì sẽ tạo mảng với số lượng cụ thể đó. 
                 	 	+ Nếu mảng đã được tạo mà tiếp tục resize thì kích thước của mảng sẽ co lại hay dãn ra so với mảng ban đầu. 
                   	+ Nếu là co lại thì 1 số phần tử trong mảng ban đầu sẽ bị mất, nếu là dãn ra thì các phần tử lúc đầu vẫn tiếp tục tồn tại 

	- resize(<số lượng>, <giá trị mặc định>):  

	+ Cấp phát mảng với số lượng phần tử cụ thể cho trước - với giá trị của các phần tử là giá trị mặc định. 
                  	+ Mảng được tạo mới nếu chưa có, nếu đã có rồi mảng sẽ co lại hoặc dãn ra so với mảng ban đầu. 

2/ at(<chỉ số index>): Truy xuất đến phần tử có chỉ số index trong vector.
vd: 
vector a;
cout << a.at(2); // Xuất ra phần tử tại vị trí 2 trong vector. Tương đương như: a[2]. Dùng cách nào cũng được. 
 
3/ size(): Trả về kích thước hiện tại của vector (số lượng các phần tử đang chứa trong vector).

4/ push_back(<Phần tử có kiểu dữ liệu bất kỳ>): Thực hiện đưa phần tử vào cuối vector.

5/ pop_back(): Xóa phần tử cuối cùng trong vector.
 
6/ front(): Trả về phần tử đầu tiên của mảng.

7/ back(): Trả về phần tử cuối cùng của mảng.

8/ capacity(): Trả về kích thước thực sự vector đang lưu trữ (các phần tử).

9/ max_size(): Trả về kích thước tối đa có thể chứa các phần tử của các container.

10/ begin(): Trả về 1 iterator trỏ đến phần tử đầu tiên trong vector (giống pHead bên List)

11/ end(): Trả về 1 iterator trỏ đến phần tử cuối cùng trong vector (giống pTail bên List)

12/ erase: Xóa phần tử trong vector.
- Hàm này có 2 dạng:
	+ Dạng 1: erase(<Tên vector>.begin() + <số nguyên x>): Xóa phần tử tại vị trí x trong mảng (vị trí trong mảng bắt đầu từ 0). 

	+ Dạng 2: erase(<Tên vector>.begin() + <số nguyên x>, <Tên vector>.begin() + <số nguyên y>): Xóa các phần tử của mảng từ vị trí x cho đến vị trí y - 1.

Lưu ý cả 2 trường hợp trên: Nếu vị trí truyền vào không hợp lệ thì chương trình sẽ bị lỗi.

13/ clear(): Xóa tất cả các phần tử hiện có trong vector, vector sau khi thực hiện câu lệnh này sẽ trở thành vector rỗng.

14/ insert: Thêm phần tử vào trong vector.
- Hàm này có 4 dạng:
	+ Dạng 1: insert(<Tên vector>.begin() + <số nguyên x>, <giá trị cần chèn>): Chèn giá trị vào vị trí x trong mảng.
	+ Dạng 2: insert(<Tên vector>.begin() + <số nguyên x>, <số lần chèn y>, <giá trị cần chèn>): Chèn y lần giá trị vào vị trí x trong mảng.
	+ Dạng 3: insert(<Tên vector>.begin() + <số nguyên x>, <Tên vector a>.begin() + <số nguyên y>, <Tên vector a>.begin() + <số nguyên z>): 
                    ---> Lấy các phần tử từ vector a bắt đầu lấy từ vị trí y cho đến vị trí z - 1 và chèn vào vị trí x của vector hiện tại. 
	+ Dạng 4: insert(<Tên vector>.begin() + <số nguyên x>, <Tên mảng a>  + <số nguyên y>, <Tên mảng a>  + <số nguyên z>): 
                   ----> Lấy các phần tử lấy từ mảng a bắt đầu lấy từ vị trí y đến vị trí z - 1 và chèn vào vị trí x của vector hiện tại.

15/ swap(<vector x>): Hoán đổi các phần tử của vector hiện tại & vector x cho nhau.




